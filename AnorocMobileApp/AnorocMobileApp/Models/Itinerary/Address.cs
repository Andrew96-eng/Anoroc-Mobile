// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AnorocMobileApp.Models;
//
//    var welcome = Welcome.FromJson(jsonString);

using System;
using System.Collections.Generic;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace AnorocMobileApp.Models.Itinerary
{
    public partial class Welcome
    {
        [JsonProperty("summary")]
        public Summary Summary { get; set; }

        [JsonProperty("results")]
        public List<Result> Results { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("score")]
        public double Score { get; set; }

        [JsonProperty("info")]
        public string Info { get; set; }

        [JsonProperty("poi")]
        public Poi Poi { get; set; }

        [JsonProperty("address")]
        public Address Address { get; set; }

        [JsonProperty("position")]
        public Position Position { get; set; }

        [JsonProperty("viewport")]
        public Viewport Viewport { get; set; }

        [JsonProperty("entryPoints")]
        public List<EntryPoint> EntryPoints { get; set; }

        [JsonProperty("dataSources", NullValueHandling = NullValueHandling.Ignore)]
        public DataSources DataSources { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("streetName")]
        public string StreetName { get; set; }

        [JsonProperty("municipalitySubdivision")]
        public string MunicipalitySubdivision { get; set; }

        [JsonProperty("municipality")]
        public string Municipality { get; set; }

        [JsonProperty("countrySecondarySubdivision")]
        public string CountrySecondarySubdivision { get; set; }

        [JsonProperty("countrySubdivision")]
        public string CountrySubdivision { get; set; }

        [JsonProperty("postalCode")]
        public string PostalCode { get; set; }

        [JsonProperty("countryCode")]
        public string CountryCode { get; set; }

        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("countryCodeISO3")]
        public string CountryCodeIso3 { get; set; }

        [JsonProperty("freeformAddress")]
        public string FreeformAddress { get; set; }

        [JsonProperty("localName")]
        public string LocalName { get; set; }

        [JsonProperty("streetNumber", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? StreetNumber { get; set; }

        public override string ToString()
        {
            return FreeformAddress;
        }
    }

    public partial class DataSources
    {
        [JsonProperty("poiDetails", NullValueHandling = NullValueHandling.Ignore)]
        public List<PoiDetail> PoiDetails { get; set; }

        [JsonProperty("geometry", NullValueHandling = NullValueHandling.Ignore)]
        public Geometry Geometry { get; set; }
    }

    public partial class Geometry
    {
        [JsonProperty("id")]
        public Guid Id { get; set; }
    }

    public partial class PoiDetail
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("sourceName")]
        public string SourceName { get; set; }
    }

    public partial class EntryPoint
    {
        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("position")]
        public Position Position { get; set; }
    }

    public partial class Position
    {
        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lon")]
        public double Lon { get; set; }
    }

    public partial class Poi
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("phone", NullValueHandling = NullValueHandling.Ignore)]
        public string Phone { get; set; }

        [JsonProperty("categorySet")]
        public List<CategorySet> CategorySet { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public string Url { get; set; }

        [JsonProperty("categories")]
        public List<string> Categories { get; set; }

        [JsonProperty("classifications")]
        public List<Classification> Classifications { get; set; }
    }

    public partial class CategorySet
    {
        [JsonProperty("id")]
        public long Id { get; set; }
    }

    public partial class Classification
    {
        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("names")]
        public List<Name> Names { get; set; }
    }

    public partial class Name
    {
        [JsonProperty("nameLocale")]
        public string NameLocale { get; set; }

        [JsonProperty("name")]
        public string NameName { get; set; }
    }

    public partial class Viewport
    {
        [JsonProperty("topLeftPoint")]
        public Position TopLeftPoint { get; set; }

        [JsonProperty("btmRightPoint")]
        public Position BtmRightPoint { get; set; }
    }

    public partial class Summary
    {
        [JsonProperty("query")]
        public string Query { get; set; }

        [JsonProperty("queryType")]
        public string QueryType { get; set; }

        [JsonProperty("queryTime")]
        public long QueryTime { get; set; }

        [JsonProperty("numResults")]
        public long NumResults { get; set; }

        [JsonProperty("offset")]
        public long Offset { get; set; }

        [JsonProperty("totalResults")]
        public long TotalResults { get; set; }

        [JsonProperty("fuzzyLevel")]
        public long FuzzyLevel { get; set; }
    }

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
